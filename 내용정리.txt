20230605

시작시
npm start

1. jsx에서는 class 명을 부여할 때 class가 아닌
className으로 클래스명을 부여한다.
2. jsx에서는 변수 넣을 때는 {}로 삽입 - 데이터바인딩
3. 인라인으로 style을 삽입 할 때는 {{fontSize:""}} 이런식


state

자료를 잠깐 저장할 때는 state를 써도 된다.
state는 자동으로 html이 재랜더링이 된다.

state 변경하는 법
setstate 변경함수를 사용을 해야 html이 재랜더링이 된다.


20230606
스프레드 오퍼레이트

state의 특징은 
기존 state == 신규 state의 경우 변경을 안해줌
array랑 object는 선언하면 직접 데이터를 저장하는 것이
아니라 저장된 곳으로 가는 화살표라고 생각을 하면됩니다.

스프레드 오퍼레이트 [...] 은 괄호를 벗겨주고
새로운 배열로 만들어준다 즉 복사를 해주고 사본을 만들어준다.
객체도 만들어준다.


컴포넌트를 만들면 좋을 거 같은 경우

1.반복적으로 html 축약할 때
2.큰페이지들
3.자주변경되는 것들


20230607
pros 복습
<자식 컴포넌트 작명={state이름}/>


그다음

function 자식 컴포넌트({state이름}){
  return{
    <div>
    {state이름}
    </div>
  }
}
이런식으로 어디든 사용가능

function Modal(props){
  return (
    <div className="modal">
      <h4>{ props.글제목[0] }</h4>
      <p>날짜</p>
      <p>상세내용</p>
    </div>
  )
}

state는 state를 사용하는 컴포넌트 중 최고 부모에 만들어놓아야한다.



20230608
보통 리액트 사이트 배포전에 전부 압축하지만
수백장에 이미지
public 폴더 안에 있던 곳은 그냥/ 이미지경로에 넣으면된다.
문제는 서브 경로에 이미지를 넣어야할 때
/ 서브폴더/이미지


하지만 권장되는 방식은 이렇게입니다. 
왜냐면 리액트로 만든 html 페이지를 배포할 때
codingapple.com 경로에 배포하면 아무런 문제가 없지만
codingapple.com/어쩌구/ 경로에 배포하면
/logo192.png 이렇게 쓰면 파일을 찾을 수 없다고 나올 수도 있습니다. 
그래서 /어쩌구/ 를 뜻하는 process.env.PUBLIC_URL 이것도 더해주면 된다고 하는군요. 


codingapple.com/어쩌구/ 경로에 리액트로 만든 페이지를 배포할 일이 아예 없으면 굳이 안해도 됩니다. 


<img src={process.env.PUBLIC_URL + '/logo192.png'} />

process.env.PUBLIC_URL  << 내사이트의 경로를 뜻하고


20230609
라우트 
react-router-dom 패키지 파일 설치하고
index.js 처럼 셋팅


  let navigate = useNavigate();
  /* 페이지 이동 */
  /* 보통 함수를 담아서 사용 */
  Link 태그가 아닌 일반 onClick 이벤트에 달아서 라우팅 진행


  nasted router
  <Route path="/ShopPage" element={<ShopPage />}>
    <Route path="/shopPageDetail" element={<ShopPageDetail />} />
    {/* nasted router 
    /ShopPage/shopPageDetail
    */}
  </Route>

 이러면  ShopPage 이컴포넌트 밑에 ShopPageDetail 이걸 보여줌
 둘다 한 화면에 보여줌


  nasted router 이거 왜필요할까
  여러 페이지를 만들때
  여러 유사한 페이지를 만들때



  url 파라미터

  상세 페이지를 수십만개를 만들어야 하는데 하나하나 사이트를 만들 수 없음
  그래서 url 파라미터를 쓴다.

            <Route
            path="/ShopPage/shopPageDetail/:id"
            /ShopPage/shopPageDetail/:id<<< 아무거나
            element={<ShopPageDetail shopData={shopData} />}
          >

          :id 이런식으로


          import { useParams } from 'react-router-dom'

          let 변수명 = useParams();
          이런식으로 식으로 쓰면 파라미터url을 쓸 수 있다 


                      /ShopPage/shopPageDetail/:id/:작명은 자유롭게 제한없이 여러개 사용가능


20230610
lifeCycle hook 
라이프 사이클
컴포넌트 사람 처럼 살고 죽는다.

컴포넌트가 보이는 순간 mount된다.
가끔 state가 조작이 된다? update가 된다.
필요 없으면 제거가 된다. unmount

이거를 왜 배워?
중간중간 간섭이 가능 즉 중간 중간 코드 실행이 가능


    useEffect가 있는 함수는 그 컴포넌트가 장착(마운트)가 되거나
    업데이트가 될 때 useEffect 안에 있는 것들이 작동한다.
    
    useEffect 안에 있는 코드는 그냥 두번 도는 게 정상임 페이지 발행하면 정상작동함

    useEffect 쓰는 이유
    useEffect 실행 시점이 다르다
    useEffect 안에 있는 코드는 html들이 랜더링이 되고 실행이 된다.
    html이 먼저 보여주면 속도가 빨라짐

   useEffect 안에 쓰는 코드들 종류
   어려운 연산
   서버에서 데이터 가져오는 작업 ajax axios
   타이머들

   왜 이름이 useEffect라는 이름을 붙였을까
   사이드 이펙트 함수 핵심과 관련는 부가 기능
   useEffect에 들어가는 []는 디팬더시
   디팬더시에는 스테이트나 변수를 넣을 수 있는데
   디펜더시를 넣으면 디팬더시 안에 있는 state나 변수가 변하면 작동을 한다,
   디팬더시를 비워 놓고 [] 넣은 상태로 두면 useEffect가 장착 즉 mount에만 실행이 된다.

   useEffect(()=>{

   안에 아래처럼 리턴문을 작성을 할 수 있는데 리턴 안에 있는 코드는 useEffect가 동작 전에 작동한다.

     return ()=>{
      보통 타이머를 작성하면 재랜더링 될 때 마다 타이머 갯수가 계속 추가가 되는데 초기화를 처리해주는 것이 좋다.
      ajax 통신 같은 것도...
      여기 사용하는 것을 clean up function

      참고로 clean up function은 mount시 실행이 안됨 unmount시 실행이 됨
    }

   },[])



   그냥 쉽게 외우기 정리 
   
   1.재랜더링 때마다 코드를 실행하고 싶으면 useEffect(()=>{})
   2. mount시 한번만 실행을 하고 싶으면 useEffect(()=>{},[])
   3. 삭제 될 때 한번 useEffect(()=>{
    return ()=>{
       unmount시 삭제
    }
   },[])
   4. 실행 전에  사용하고 싶으면
   useEffect(()=>{
    return ()=>{
      여기에
    }
   },[])
   5 디팬더시에 변수나 state를 넣으면 넣은 state나 변수가 변경시에만 실행함
   useEffect(()=>{
    return ()=>{

    }
   },[여기 넣으면 ])


20230611

서버: 부탁하면 진짜로 들어주는 프로그램

서버통신

1.방법(get,post) 정하고
2.어떤자료(url) 적어 보내라

axios 사용해라

axios post 서버로 데이터 보내는 법
axios.post('URL', {name : 'kim'})

동시에 ajax get 처리하는 법

Promise.all( [axios.get('URL1'), axios.get('URL2')] )


생 자바스크립트에서 통신법 fetch
fetch('URL').then(결과 => 결과.json()).then((결과) => { console.log(결과) } ) JSON -> object/array 변환작업
이런식으로 json 변환 작업이 필요함



        /* 전환 애니메이션 만들기 */
        /* 1.애니메이션 동작 전 className 만들기 */
        /* 2.애니메이션 동작 후 className 만들기 */
        /* 3. className에 transition 속성 추기 */
        /* 4. 원할 때 2번 className 추가 */


    /* useEffect 애니메이션을 적용할 때 이런식으로 타이머를 줘야한다 */
    /* 리액트의 automatic batching 기능 */
    /* 스테이트 변경 함수를 쓸 때마다 재랜더링을 해주는 게 아니라 변경이 전부 되고 나서 마지막에 재랜더링을 해줘야 한다.
    즉 미세한 시간차를 주면 애니메이션이 가능 
    */
    


    Single Page Application 문제는 state 값 공유가 힘들다.
    
    컴포넌트 간 state 공유 어려움
    부모에서 자식 공유는 가능함
    그래서 보통은 중첩 프롭스 계속해서 사용해야 하는데
    그것이 싫다면

    1.Context API(리액트 기본 문법)
    2.Redux등을 사용가능


1.Context API

단점 
1. state 변경시 쓸데없는 컴포넌트까지 전부 재렌더링이 되고 
2. useContext() 를 쓰고 있는 컴포넌트는 나중에 다른 파일에서 재사용할 때 Context를 import 하는게 귀찮아질 수 있습니다.
그래서 이것 보다는 redux 같은 외부라이브러리를 많이들 사용합니다.
걍 이거 쓰지마
    



2.Redux
컴포넌트들이 props 없이 값을 공유 가능

Redux를 쓰는 이유
Redux라는 공간에 state들을 저장하여
모든 컴포넌트에서 쓸 수 있게 한다.


Redux 셋팅법
1. npm install @reduxjs/toolkit react-redux 설치 후

2. store.js 파일 생성후 셋팅


import { configureStore } from '@reduxjs/toolkit'

export default configureStore({
  reducer: { }
}) 


3. 그다음 index.js에서 아래 처럼 셋팅

import { Provider } from "react-redux";
import store from './store.js'

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </Provider>
  </React.StrictMode>
); 


4. store.js에서 사용할 state 셋팅

import { configureStore, createSlice } from '@reduxjs/toolkit'

let user = createSlice({
  name : 'user', // 1.스테이트 이름
  initialState : 'kim' // 2.스테이트 값
})

export default configureStore({
  reducer: {
    //3. 위에 작성한 거 여기에 등록
    user : user.reducer,
    //4. 원하는 컴포넌트 가서 useSelector 사용
  }
}) 



5.원하는 컴포넌트

import React from "react";
import Styled from "./styled";
import { useDispatch, useSelector } from "react-redux";
import { changeName } from "../../store/store";


  /* Redux store에 있던 state 남음 */
  let shopBasket = useSelector((state) => {
    return state.shopBasket;
  });


   /* 참고사항 useSelector를 편하게 쓰려면 */
  /*   let store = useSelector((state) => {
        return state.user;
      }); */
  //이런식이면 user만도 가능하다.
  //여기서 궁금증 그러면 redux쓰면 편하지만 props 왜씀?
  //셋팅법이랑 코드 정리하기 불편함
  //+ 스테이트 공유가 필요 없으면 리덕스에 저장 필요 없음



  6. 리덕스 스테이트 변경법
  /* -state 수정해주는 함수를 만들고 */
  /* -원할 때 그 함수를 실행해 달라고 store.js에 요청 */

    //1.state 수정 함수 만들고
  //2.만든 함수를 export 해야함 밖으로 빼서
  //3.만든 함수를 import해서 사용함



export let { changeName } = user.actions;
  //2.만든 함수를 export 해야함 밖으로 빼서


import { configureStore, createSlice } from "@reduxjs/toolkit";
import ShopBasket from "./storeDate/shopBasket";

let user = createSlice({
  name: "user", // 스테이트 이름
  initialState: "kim", // 스테이트 값

  /* 리덕스 스테이트 변경법 */
  /* -state 수정해주는 함수를 만들고 */
  /* -원할 때 그 함수를 실행해 달라고 store.js에 요청 */

  reducers: {
    changeName(state /* 위에 기존 state */) {
      return "john" + state;
    },
  },
  //1.state 수정 함수 만들고
  //2.만든 함수를 export 해야함 밖으로 빼서
  //3.만든 함수를 import해서 사용함
});
/* 리덕스에서 스테이트 불러오기 */

export let { changeName } = user.actions;
  //2.만든 함수를 export 해야함 밖으로 빼서

let stock = createSlice({
  name: "stock", // 스테이트 이름
  initialState: [10, 11, 12], // 스테이트 값
});

let shopBasket = createSlice({
  name: "shopBasket",
  initialState: ShopBasket,
});

export default configureStore({
  reducer: {
    //위에 작성한 거 여기에 등록
    user: user.reducer,
    //작명하고 이렇게 하고
    // 원하는 컴포넌트 가서 useSelector 사용
    stock: stock.reducer,
    shopBasket: shopBasket.reducer,
  },
});



원하는 컴포넌트 가서


import React from "react";
import Styled from "./styled";
import { useDispatch, useSelector } from "react-redux";
import { changeName } from "../../store/store";

function Cart() {
  /* Redux store에 있던 state 남음 */
  let shopBasket = useSelector((state) => {
    return state.shopBasket;
  });
  /*   console.log("리덕스 store user:::", store.user);
  console.log("리덕스 store stock:::", store.stock); */

  /* 참고사항 useSelector를 편하게 쓰려면 */
  /*   let store = useSelector((state) => {
        return state.user;
      }); */
  //이런식이면 user만도 가능하다.
  //여기서 궁금증 그러면 redux쓰면 편하지만 props 왜씀?
  //셋팅법이랑 코드 정리하기 불편함
  //+ 스테이트 공유가 필요 없으면 리덕스에 저장 필요 없음

  console.log("리덕스 store shopBasket:::", shopBasket);

  let dispatch = useDispatch();
  //useDispatch는 store.js에 요청해주는 함수

  return (
    <Styled>
      <table className="common-table">
        <thead>
          <tr>
            <th>#</th>
            <th>상품명</th>
            <th>수량</th>
            <th>변경하기</th>
          </tr>
        </thead>
        <tbody>
          {shopBasket.map((data, i) => {
            return (
              <tr key={i}>
                <td>{data.id}</td>
                <td>{data.name}</td>
                <td>{data.count}</td>
                <td>
                  <button
                    type="button"
                    onClick={() => {
                      dispatch(changeName());
                    }}
                  >
                    +
                  </button>
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </Styled>
  );
}

export default Cart;



로컬스토리지

1. key: value 형태로 저장
2. 문자 데이터만 저장
3. 5m 메가만 저장 가능
4. 사이트에 재접속을 해도 남아있음


콘솔창에서 
아래처럼 입력하면 저장 가능
local.storage.setItem("이름","값")
단 문자만이니
객체나 오브젝트를 저장하고 싶으면 json으로 변환


아래처럼 입력하면 저장한 값 출력 가능 local.storage.getItem('이름')

삭제하고 싶으면
local.storage.removeItem('이름')



react query

- ajax 성공시/ 실패시 다른 html 보여주려면
- 몇초마다 자동으로 ajax 요청?
- 실패시 몇초 후 요청 재시도
- prefetch 
이런 거 하기 귀찮다
리액트 쿼리를 쓰면 됩니다.

단 항상 유용하진 않음
유용한 곳은 실시간 데이터를 계속 가져와야하는 사이트들이 쓰면 좋다.
코인 거래소 등등

npm install react-query



  //데이터 result.data
  //로딩 성공, 실패 로딩중 파악가능 result.isLoading
  //에러 result.error

  //리액트 쿼리에 장점
  //1. ajax 요청 성공/ 실패/ 로딩중 상태를 쉽게 파악
  /*   ajax 로딩중일 땐 <A/> 보여주세요~
       ajax 성공시엔 <B/> 보여주세요~
       이런거 직접 개발하려면 state 부터 만들어야 했을텐데 얘는 그럴 필요가 없습니다.  */
  //2. 틈만나면 알아서 ajax 재요청을 해줌 >> 자동으로 refetch 해줌 실시간 데이터 받아온다.
  //3. 실패시 retry 알아서 해줌
  //4. state 공유 안해도 됩니다. >> 한번 요청하면 여러게 요청해도 하나로 통합해서 요청하기 때문에 
  //   여러번 요청을 해도 상관이 없다.
  //5. ajax 결과 캐싱기능  >> ajax 요청한 값을 5분동안 기억하는 기능 즉 5분 전에 성공한 ajax 결과를 한번 보여주고 다시 ajax 통신을 해서 그 값을 보여줌

  // 그냥 실시간으로 데이터 뿌려지는 곳에 사용하면 좋다
  // redux-toolkit 설치를 했으면 RTK Query도 자동설치됩니다. 이거 리액트 쿼리랑 비슷하지만 문법 더러움




   let result = useQuery("aioxsData", () => {
    return (
      axios.get(`https://codingapple1.github.io/userdata.json`).then((data) => {
        return data.data;
      }),
      { staleTime: 2000 }  // 이런식으로 refetch 시간 조정가능 
    );
  });
  //데이터 result.data
  //로딩 성공, 실패 로딩중 파악가능 result.isLoading
  //에러 result.error

  //리액트 쿼리에 장점
  //1. ajax 요청 성공/ 실패/ 로딩중 상태를 쉽게 파악
  /*   ajax 로딩중일 땐 <A/> 보여주세요~
       ajax 성공시엔 <B/> 보여주세요~
       이런거 직접 개발하려면 state 부터 만들어야 했을텐데 얘는 그럴 필요가 없습니다.  */
  //2. 틈만나면 알아서 ajax 재요청을 해줌 >> 자동으로 refetch 해줌 실시간 데이터 받아온다.
  //3. 실패시 retry 알아서 해줌
  //4. state 공유 안해도 됩니다. >> 한번 요청하면 여러게 요청해도 하나로 통합해서 요청하기 때문에 
  //   여러번 요청을 해도 상관이 없다.
  //5. ajax 결과 캐싱기능  >> ajax 요청한 값을 5분동안 기억하는 기능 즉 5분 전에 성공한 ajax 결과를 한번 보여주고 다시 ajax 통신을 해서 그 값을 보여줌

  // 그냥 실시간으로 데이터 뿌려지는 곳에 사용하면 좋다
  // redux-toolkit 설치를 했으면 RTK Query도 자동설치됩니다. 이거 리액트 쿼리랑 비슷하지만 문법 더러움




  single page application 특징
  npm run 등으로 발행을 하면 하나의 js 파일에 모든 코드를 다 쑤셔 넣음
  이러면 파일을 커서 로딩 속도가 느림



  (App.js)
import {lazy, Suspense, useEffect, useState} from 'react'

const Detail = lazy( () => import('./routes/Detail.js') )
const Cart = lazy( () => import('./routes/Cart.js') )

미리 로드 될 필요 없는 컴포넌트 들을 이런식으로 느리게 임포트 해서 속도를 빠르게 향상한다.
위처럼 하면 lazy 파일들은 별도의 js 파일로 분리가 됩니다.

단점은 lazy 처리한 컴포넌트로 접속을 해야할 때 늦어지는 속도가 발생을 한다.

그럴 경우

<Suspense fallback={ <div>로딩중임</div> }>
  <Detail shoes={shoes} />
</Suspense>

Suspense를 상단으로 추가하고 fallback 속성으로 ui를 넣을 수 있다.
lazy 사용하면 당연히 Detail 컴포넌트 로드까지 지연시간이 발생할 수 있습니다. 그럴 땐
1. Suspense 라는거 import 해오고
2. Detail 컴포넌트를 감싸면
Detail 컴포넌트가 로딩중일 때 대신 보여줄 html 작성도 가능합니다. 
 

귀찮으면 <Suspense> 이걸로 <Routes> 전부 감싸도 됩니다. 




memo useMemo

state 값이 변할 때 마다 재랜더링이 일어남
그러면 같이 있는 컴포넌트들도 재랜더링이 일어난다.
그래서 꼭 필요할 때만 컴포넌트 재랜더링을 시키려면
memo라는 함수에 담아서 사용


let Child = memo(function () {
  return <div>자식 컴포넌트</div>;
});
위 컴포넌트는 꼭 필요할  때 재랜더링 시켜라

결론은 memo라는 걸로 재랜더링 오래 걸리는 컴포넌트를
꼭 필요할 때 한번만 재랜더링 시키려면 memo라는 걸로 감싸라

memo의 원리 
memo는 특정 상황에서만 재랜더링을 시킨다
컴포넌트의 전송되는 props가 변할 때만 재랜더링이 된다.

단점 
memo도 많이쓰면 좋지 않은게
비교 작업을 한다.
기존 props랑 새로운 props랑

기존 props === 새로운 props
만약에 props가 길고 복잡하면 오히려 손해
꼭 필요한 무거운 컴포넌트에만 써라

useMemo;


/* function 함수(){
  return 반복문 10억 번 돌린 결과
} */


function Cart() {
  /* let result = 함수(); */
  // 이러면 문제 cart가 재랜더링 될 때마다 반복문 돌음 이거를 개선하고 싶으면
/*   useMemo(() => {
    return 함수();
  },[]); */
  //이러면 cart 랜더링될 때 한번만 결과를 리턴함 
  // useEffetc랑 똑같이 디펜더시 넣을 수 있음 []안에 스테이트 넣으면 스테이트 바뀔 때만 작동


  그러면 useEffect랑 차이는?

  useEffect는 html이 랜더링이 다 끝나고
  useMemo는 html이 랜더링 될 때 같이 실행




  리액트는 원래 batch 기능이 있다.
  automatic batching 
  setCount(1) 
  setName(2) 
  setValue(3)   //여기서 1번만 재렌더링됨 
  즉 스테이트가 뭉쳐있으면 재랜더링이 일어나면 마지막 한번만 재랜더링이 
  되는데 이것을 오토메틱 배칭

  예외가 있음 ajax 요청이나 settimeOut 내부 함수등의
  리액트 17버전에서는 배칭이 안일남
  그러나 리액트 18버전에서 배칭이 일어남

  2. useTransition 




  state 변경함수는 async 하게 처리되는 함수기 때문에 완료되기까지 시간이 오래걸리면 제쳐두고 다음 코드를 실행해줍니다.
그래서 저렇게 state1 변경하고나서 state2를 변경하는 코드를 작성할 땐 가끔 문제가 생깁니다.

이걸 정확히 sync스럽게, 순차적으로 실행하고 싶을 때 해결책은 useEffect입니다. 

useEffect를 잘 작성하면 특정 state가 변경될 때 useEffect를 실행할 수 있다고 하지 않았습니까.

알아서 해결해보십시오.